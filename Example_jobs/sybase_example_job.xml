<?xml version='1.0' encoding='UTF-8'?>

<dbwatch-task>
	<comp-query><![CDATA[.[type='instance' & databasetype='sybase']/instance[maj_version > '11' & hasengine='YES']]]></comp-query>
	<metadata>
		<data>
			<value>category:Custom Package</value>
			<key>category</key>
		</data>
	</metadata>
	<ascheck>
		<name>Example job</name>
		<object>dbw_example</object>
		<description>This job is an example job</description>
		<long-description>This job is an example job that needs to be modified by the end user</long-description>
		<version>1.0</version>
		<company>dbwatch.com</company>
		<default-schedule>* * * *</default-schedule>
		<group>com.dbwatch.job</group>
		<artifactid>sybase_example_job</artifactid>
		<acknowledgements>true</acknowledgements>
	</ascheck>
	<dependencies>
		<dependency>
			<object>dbw_example</object>
			<object-type>2</object-type>
			<description></description>
			<cleanup-on-fail>false</cleanup-on-fail>
		</dependency>
		<dependency>
			<object>dbw_example_histr</object>
			<object-type>0</object-type>
			<description></description>
			<cleanup-on-fail>false</cleanup-on-fail>
		</dependency>
	</dependencies>
	<parameters>
		<parameter>
			<name>warning threshold</name>
			<sqltype>6</sqltype>
			<default-value>10</default-value>
			<description>Will give a warning if the value exceeds this value.</description>
		</parameter>
		<parameter>
			<name>alarm threshold</name>
			<sqltype>6</sqltype>
			<default-value>20</default-value>
			<description>Will give an alarm if the value use exceeds this value. </description>
		</parameter>
		<parameter>
			<name>keep data for</name>
			<sqltype>6</sqltype>
			<default-value>7</default-value>
			<description>Days to keep data for</description>
		</parameter>
	</parameters>
	<pre-implementation/>
	<implementation>
		<code>
			<![CDATA[ 
            create table dbw_example_histr (value bigint, histr_date datetime) 
            ]]>
		</code>
		<code>
			<![CDATA[ 
			create or replace procedure dbw_example (taskid in number)
				is
				
				now_date date;
				warning_threshold number;
				alarm_threshold number;
				pos varchar2(3);
				return_info varchar2(1000);
				keep_data_for number;
				status number;
				check_value number;
				begin
				now_date:=sysdate;
				status:=0;
				pos:='00';
				
				select value into warning_threshold from dbw_parameters where name='warning threshold' and task_id = taskid;
				select value into alarm_threshold from dbw_parameters where name='alarm threshold' and task_id = taskid;
				select value into keep_data_for from dbw_parameters where name='keep data for' and task_id = taskid;
				
				pos:='01';
				
				select 1 into check_value;
				
				return_info:='Out check value is '||check_value;
				
				pos:='02';
				
				
				if check_value > warning_threshold then
					pos:='03';
					return_info:= 'Warning, value: '|| check_value ||' larger than ' ||warning_threshold;
					status:=1;
				end if;
				if check_value > alarm_threshold then
					pos:='04';
					return_info:= 'Alarm, value: '|| check_value ||' larger than ' ||alarm_threshold;
					status:=2;
				end if;
				
				pos:='05';
				
				insert into dbw_example_histr (value, histr_date) values (check_value, now_date);
				
				pos:='06';
				dbw_updateCheckValues(taskid,status,return_info);
				pos:='07';
				delete from dbw_example_histr where histr_date < sysdate - keep_data_for;
				commit;
				pos:='08';
				
				EXCEPTION
				WHEN OTHERS
				THEN
				 DECLARE
				 err_code_no NUMBER:=SQLCODE;
				 err_msg_txt VARCHAR2(300):=SQLERRM;
				 BEGIN
				  dbw_updateCheckValues(taskid, 1, 'Exception, '||err_msg_txt);
				  INSERT INTO DBW_ERRORS
				  VALUES('EXCEPTION in procedure dbw_example',sysdate,err_code_no,err_msg_txt);
				  COMMIT;
				  dbms_output.put_line('EXCEPTION! '||' pos = '||pos);
				 END;
				 end dbw_example; ]]>
		</code>
		<code>create procedure dbw_dbms_uptime
			@task_id int as
			/*

			Dependencies :

			The user who owns the procedure needs (to compile) the SELECT privilege from SYS user on the following
			dynamic performance views and data dictionary views:


			Short description

			Task
			This task collects database uptime statistics.

			Parameters

			dbw username -  Database user name used by the dbWatch Server when connecting to the dbWatch Engine.

			dbw user id -  Database user id used by the dbWatch Server when connected to the dbWatch Engine.

			end availability timestamp -

			end availability duration -

			*/
			begin
			declare uptime_cur cursor for
			select event_name, event_date, period from dbw_dbms_uptime_data

			declare @uptime_rec_event_name varchar(64)
			declare @uptime_rec_event_date datetime
			declare @uptime_rec_period     int

			declare @dbms_started datetime
			declare @now_date datetime
			declare @last_start datetime
			declare @last_check datetime
			declare @first_check datetime

			declare @last_period int
			declare @id int
			declare @ses_id int
			declare @last_ses_id int
			declare @db_user_name varchar(20)
			declare @return_info varchar(1200)
			declare @pos varchar(3)
	--		declare @big_histr_rec varchar(4000)

			set @now_date = getdate()



			select @dbms_started = min(loggedindatetime) from master.dbo.sysprocesses where spid &lt; 50
			select @last_start = isnull(max(event_date), @dbms_started) from dbw_dbms_uptime_data where event_name='DBMS started'
			select @first_check = isnull(max(event_date), dateadd(dd, -1, @dbms_started))  from dbw_dbms_uptime_data where event_name='first check'
			select @last_check = isnull(max(event_date), dateadd(dd, -1, @dbms_started)) from dbw_dbms_uptime_data where event_name='last check'
			select @last_period = isnull(max(period),0)  from dbw_dbms_uptime_data
			
			/* If database has not been stopped since last check, update "last check" value */
			
			if @dbms_started &lt; @last_check
			begin
				/* checks is dbWatch has been disconnected  */ 
				
								  
	
			  	update dbw_dbms_uptime_data set event_date=@now_date where event_date=@last_check and event_name='last check'
			end
			
			/* If database has been restarted since last check, register "DBMS started", "first check" and "last check" */ 
			if @dbms_started &gt;= @last_check
			begin

				open uptime_cur
				fetch uptime_cur into @uptime_rec_event_name, @uptime_rec_event_date, @uptime_rec_period

				while @@SQLSTATUS = 0
				begin

		--			select @big_histr_rec = @uptime_rec_event_name+';'+convert(varchar(30), @uptime_rec_event_date, 120)+';'+convert(varchar(10), @uptime_rec_period)
	
					insert into dbw_dbms_uptime_histr values(@uptime_rec_event_name, @uptime_rec_event_date, @uptime_rec_period)
		
			--		set @big_histr_rec = ''

					fetch  uptime_cur into @uptime_rec_event_name, @uptime_rec_event_date, @uptime_rec_period
				end

				close uptime_cur

				delete from dbw_dbms_uptime_data
				insert into dbw_dbms_uptime_data values ('DBMS started',@dbms_started,@last_period+1)
				insert into dbw_dbms_uptime_data values ('first check',@now_date,@last_period+1)
				insert into dbw_dbms_uptime_data values ('last check',@now_date,@last_period+1)

			end

			select @return_info = 'Database started '	+convert(varchar(24), @dbms_started,100)

			deallocate cursor uptime_cur

			exec dbw_updateTaskValues @task_id, @return_info
			end</code>
	</implementation>
	<post-implementation>
	</post-implementation>
	<dbwatch-report-template>
		<version>2</version>
		<title>Example job</title>
		<description></description>
		<default-schedule>0 * * *</default-schedule>
		<text>Example job</text>
		<chapter>
			<type></type>
			<title>Example job</title>
			<text></text>
			<presentations>
				<presentation>
					<task-name>Example job</task-name>
					<company-name>dbwatch.com</company-name>
					<title>Example job presentation</title>
					<select-call>select value, histr_date from dbw_example_histr</select-call>
					<resultset>
						<column>
							<name>value</name>
							<sql-type>0</sql-type>
						</column>
						<column>
							<name>histr_date</name>
							<sql-type>10</sql-type>
						</column>
					</resultset>
					<table>
						<to-plot>value</to-plot>
						<to-plot>histr_date</to-plot>
					</table>
				</presentation>
			</presentations>
		</chapter>
	</dbwatch-report-template>
	<express-install>false</express-install>
	<force-install>false</force-install>   
</dbwatch-task>